10^seq(-9, -5)
png("C:/Users/marco/OneDrive - Politecnico di Milano/Corsi/Magistrale/Anno_II_Semestre_II/PACS_project_shared/R/Our/prova.png")
image2D(z = matrix(c(0,0,10,0), nr = 2, nc = 2), x=seq(0,1, length.out = 2), y=seq(0,1, length.out = 2),
main = paste("Quantile field (true - C++), alpha =", alpha),
col=cols, contour = TRUE)
dev.off()
library(plot3D)
png("C:/Users/marco/OneDrive - Politecnico di Milano/Corsi/Magistrale/Anno_II_Semestre_II/PACS_project_shared/R/Our/prova.png")
image2D(z = matrix(c(0,0,10,0), nr = 2, nc = 2), x=seq(0,1, length.out = 2), y=seq(0,1, length.out = 2),
main = paste("Quantile field (true - C++), alpha =", alpha),
col=cols, contour = TRUE)
dev.off()
library(plot3D)
png("C:/Users/marco/OneDrive - Politecnico di Milano/Corsi/Magistrale/Anno_II_Semestre_II/PACS_project_shared/R/Our/prova.png")
image2D(z = matrix(c(0,0,10,0), nr = 2, nc = 2), x=seq(0,1, length.out = 2), y=seq(0,1, length.out = 2),
main = paste("Quantile field (true - C++), alpha =", alpha),
col=c(1,2), contour = TRUE)
dev.off()
library(plot3D)
png("C:/Users/marco/OneDrive - Politecnico di Milano/Corsi/Magistrale/Anno_II_Semestre_II/PACS_project_shared/R/Our/prova.png")
image2D(z = matrix(c(0,0,10,0), nr = 2, nc = 2), x=seq(0,1, length.out = 2), y=seq(0,1, length.out = 2),
main = paste("Quantile field (true - C++), alpha =", 0.1),
col=c(1,2), contour = TRUE)
dev.off()
library(sn)
xi_ = 4
omega_ = 0.05*(3+3)
skewed_t <- rsn(nnodes, xi = xi_, omega = omega_, alpha = 5)
skewed_t <- rsn(3600, xi = xi_, omega = omega_, alpha = 5)
skewed_t <- skewed_t - mean(skewed_t)
hist(skewed_t )
expression("RMSE", _f)
expression("RMSE"[f])
t0 = Sys.time()
t1 = Sys.time()
t2 = Sys.time()
d1 = t1 - t0
d2 = t2 - t1
d1 + d2
d1
d2
1.635791 + 1.545531
587*4
sqrt(0.0286^2 + 0.1632^2 + 0.0449^2)
.libPaths()
exp(1.5)
log(4)
exp(2.5)Ã¹
exp(2.5)
rm(list = ls())
graphics.off()
# N_folders = c("N_576", "N_1225", "N_2500", "N_5041", "N_10000",
#               "N_20164", "N_40000")
N_folders = c("N_742", "N_1452", "N_2789", "N_5502") # ,"N_11011", "N_22086", "N_44136")
n_folders = c("n_256", "n_484", "n_1024", "n_2025", "n_3969")
setwd("C:/Users/marco/OneDrive - Politecnico di Milano/Corsi/Magistrale/Anno_II_Semestre_II/PACS_project_shared/R/Our/to_deliver/tests_wrappers/Test_1")
dirname(rstudioapi::getActiveDocumentContext()$path)
rm(list = ls())
graphics.off()
seed = 7893475
alphas = c(0.1, 0.25, 0.5, 0.75, 0.9)
source("../utilities.R")
library(Matrix)
library(plot3D)
library(geoR)
library(fdaPDE)
library(fdaPDE2)
## create mesh, unit square
nxx = 60
x <- seq(0, 1, length.out = nxx)
y <- x
locations <- expand.grid(x, y)
n = dim(locations)[1]
mesh <- fdaPDE::create.mesh.2D(locations)
nodes = mesh$nodes
nnodes = dim(nodes)[1]
mesh_data <- list(
"nodes"    = mesh$nodes,
"edges"    = mesh$edges,
"elements" = mesh$triangles,
"neigh"    = mesh$neighbors,
"boundary" = mesh$nodesmarkers
)
## define regularizing term
pde <- new(Laplacian_2D_Order1, mesh_data)
## set zero forcing term
quadrature_nodes <- pde$get_quadrature_nodes()
f <- as.matrix(rep(0., times = dim(quadrature_nodes)[1]))
pde$set_forcing_term(as.matrix(f))
## define SQRPDE model
model <- new(SQRPDE_Laplacian_2D_GeoStatNodes, pde)
M = 10  # number of simulations
## prepare room for results
RMSE_matrix = matrix(nrow = M, ncol=length(alphas))
SpRMSE_matrix = matrix(nrow = n, ncol=length(alphas))
alpha_index = 0
for(alpha in alphas){
alpha_index = alpha_index + 1
model$set_alpha(alpha)
RMSE_vector = rep(0, M)
SpRMSE_vector = rep(0, n)
for(m in 1:M){
## data
data_result = data_creation_hetero_grf(nxx = nxx, nodes = nodes,
locations = locations, seed = seed*m)
data = data_result$data
fn_true = data_result$fn_true       # true field at locations
f_true = data_result$f_true         # true field at mesh nodes
mean_true = data_result$mean.field  # true mean field
sd_true = data_result$std.field     # true std deviation field
## set smoothing parameter (optimized through exact GCV strategy)
lambda <- read.csv(paste0("/alpha_",
alpha_string, "/sim_,",
m, "/LambdaCpp.csv"), header = FALSE)$V1
model$set_lambda_s(lambda)
## set observations, tolerances and the quantile order
model$set_observations(as.matrix(data))
## solve smoothing problem
model$solve()
## extract the results
f_hat = model$f()
fn_hat = model$fn()
## RMSE & SpRMSE
RMSE_vector[m] = RMSE(f_true, f_hat)
SpRMSE_vector = SpRMSE_vector + (fn_hat - fn_true)^2
}
SpRMSE_vector = sqrt(SpRMSE_vector/M)
SpRMSE_matrix[, alpha_index] = SpRMSE_vector
RMSE_matrix[, alpha_index] = RMSE_vector
}
###------------------------TEST 1-----------------------------------------------
# domain:       unit square [0,1] x [0,1]
# sampling:     locations = nodes
# penalization: laplacian
# covariates:   no
# BC:           no
# order FE:     1
## RMK: set the directory to the source file location
##      ("Session" --> "Set Working Directory" --> "To source file location")
rm(list = ls())
graphics.off()
seed = 7893475
alphas = c(0.1, 0.25)#  ,  0.5, 0.75, 0.9)
source("../utilities.R")
library(Matrix)
library(plot3D)
library(geoR)
library(fdaPDE)
library(fdaPDE2)
## create mesh, unit square
nxx = 60
x <- seq(0, 1, length.out = nxx)
y <- x
locations <- expand.grid(x, y)
n = dim(locations)[1]
mesh <- fdaPDE::create.mesh.2D(locations)
nodes = mesh$nodes
nnodes = dim(nodes)[1]
mesh_data <- list(
"nodes"    = mesh$nodes,
"edges"    = mesh$edges,
"elements" = mesh$triangles,
"neigh"    = mesh$neighbors,
"boundary" = mesh$nodesmarkers
)
## define regularizing term
pde <- new(Laplacian_2D_Order1, mesh_data)
## set zero forcing term
quadrature_nodes <- pde$get_quadrature_nodes()
f <- as.matrix(rep(0., times = dim(quadrature_nodes)[1]))
pde$set_forcing_term(as.matrix(f))
## define SQRPDE model
model <- new(SQRPDE_Laplacian_2D_GeoStatNodes, pde)
M = 2  # number of simulations
## prepare room for results
RMSE_matrix = matrix(nrow = M, ncol=length(alphas))
SpRMSE_matrix = matrix(nrow = n, ncol=length(alphas))
alpha_index = 0
for(alpha in alphas){
alpha_index = alpha_index + 1
model$set_alpha(alpha)
RMSE_vector = rep(0, M)
SpRMSE_vector = rep(0, n)
for(m in 1:M){
## data
data_result = data_creation_hetero_grf(nxx = nxx, nodes = nodes,
locations = locations, seed = seed*m)
data = data_result$data
fn_true = data_result$fn_true       # true field at locations
f_true = data_result$f_true         # true field at mesh nodes
mean_true = data_result$mean.field  # true mean field
sd_true = data_result$std.field     # true std deviation field
## set smoothing parameter (optimized through exact GCV strategy)
lambda <- read.csv(paste0("/alpha_",
as.character(alpha*100), "/sim_,",
m, "/LambdaCpp.csv"), header = FALSE)$V1
model$set_lambda_s(lambda)
## set observations, tolerances and the quantile order
model$set_observations(as.matrix(data))
## solve smoothing problem
model$solve()
## extract the results
f_hat = model$f()
fn_hat = model$fn()
## RMSE & SpRMSE
RMSE_vector[m] = RMSE(f_true, f_hat)
SpRMSE_vector = SpRMSE_vector + (fn_hat - fn_true)^2
}
SpRMSE_vector = sqrt(SpRMSE_vector/M)
SpRMSE_matrix[, alpha_index] = SpRMSE_vector
RMSE_matrix[, alpha_index] = RMSE_vector
}
