quadrature_nodes <- pde$get_quadrature_nodes()
f <- as.matrix(rep(0., times = dim(quadrature_nodes)[1]))
pde$set_forcing_term(as.matrix(f))
## define SQRPDE model
model <- new(SQRPDE_Laplacian_1_5D_GeoStatNodes, pde)
## simulations
M = 10
locations = nodes
n = dim(locations)[1]
## prepare room for results
RMSE_matrix = matrix(nrow = M, ncol=length(alphas))
SpRMSE_matrix = matrix(nrow = n, ncol=length(alphas))
alpha_index = 0
for(alpha in alphas){
alpha_index = alpha_index + 1
model$set_alpha(alpha)
RMSE_vector = rep(0, M)
SpRMSE_vector = rep(0, n)
for(m in 1:M){
## data
data_unnnoised = data_generation(nodes[, 1], nodes[, 2])
sd_noise = 0.1*(max(data_unnnoised)-min(data_unnnoised))
set.seed(seed + m*100)
noise = rnorm(n,0,sd_noise)
data = data_unnnoised + noise
set.seed(seed + m*100)
f_true =  data_generation(nodes[, 1], nodes[, 2]) + qnorm(alpha,0,sd_noise)
fn_true = f_true
## set smoothing parameter (optimized through exact GCV strategy)
suppressWarnings({
lambda <- read.csv(paste0(getwd(), "/alpha_", as.character(alpha*100), "/sim_", as.character(m),
"/LambdaCpp.csv"), header = FALSE)$V1
})
model$set_lambda_s(lambda)
## setters
model$set_observations(as.matrix(data))
## solve smoothing problem
model$solve()
## extract the results
f_hat = model$f()
fn_hat = model$fn()
## RMSE & SpRMSE
RMSE_vector[m] = RMSE(f_true, f_hat)
SpRMSE_vector = SpRMSE_vector + (fn_hat - fn_true)^2
}
SpRMSE_vector = sqrt(SpRMSE_vector/M)
SpRMSE_matrix[, alpha_index] = SpRMSE_vector
RMSE_matrix[, alpha_index] = RMSE_vector
}
## Plot results
ylim_rmse = c(min(min(RMSE_matrix), min(SpRMSE_matrix)),
max(max(RMSE_matrix), max(SpRMSE_matrix)))
boxplot(RMSE_matrix)
title(expression(RMSE), cex = 2)
boxplot(SpRMSE_matrix)
title(expression(SpRMSE), cex = 2)
setwd("C:/Users/marco/OneDrive - Politecnico di Milano/Corsi/Magistrale/Anno_II_Semestre_II/PACS_project_shared/R/Our/to_deliver/tests_wrappers/Test_6")
###------------------------TEST 6-----------------------------------------------
# domain:       Hub
# sampling:     locations = nodes
# penalization: laplacian
# covariates:   yes
# BC:           no
# order FE:     1
## RMK: set the directory to the source file location
##      ("Session" --> "Set Working Directory" --> "To source file location")
rm(list = ls())
graphics.off()
seed = 21
set.seed(seed)
alphas = c(0.1, 0.5, 0.9)
source("../utilities.R")
library(rgl)
library(Matrix)
library(plot3D)
library(fdaPDE)
library(fdaPDE2)
## create mesh, hub domain
data(hub2.5D)
mesh_base = create.mesh.2.5D(nodes = hub2.5D$hub2.5D.nodes, triangles = hub2.5D$hub2.5D.triangles)
mesh = refine.by.splitting.mesh.2.5D(mesh = mesh_base)
mesh_data <- list(
"nodes"    = mesh$nodes,
"edges"    = mesh$edges,
"elements" = mesh$triangles,
"neigh"    = mesh$neighbors,
"boundary" = mesh$nodesmarkers
)
nodes = mesh$nodes
locations = nodes
n = dim(locations)[1]
## mean and standard deviation functions for the data generation
mean.function = function(p){
x = p[,1]
y = p[,2]
z = p[,3]
f = 1*sin(2*pi*x)+1*sin(2*pi*y)+3*sin(2*pi*z)
return(f)
}
std.function = function(p){
x = p[,1]
y = p[,2]
z = p[,3]
f = 2*abs(z-0.5)+0.1
return(f)
}
## true beta vector
beta_true = c(2,1)
q = length(beta_true)
## covariates
set.seed(seed)
cov1 <- (rnorm(n, mean = 0 , sd = 1))
set.seed(seed)
cov2 <- (rexp(n, rate = 1))
X = cbind(cov1 ,cov2)
## define regularizing term
pde <- new(Laplacian_2_5D_Order1, mesh_data)
## set zero forcing term
quadrature_nodes <- pde$get_quadrature_nodes()
f <- as.matrix(rep(0., times = dim(quadrature_nodes)[1]))
pde$set_forcing_term(as.matrix(f))
## define SQRPDE model
model <- new(SQRPDE_Laplacian_2_5D_GeoStatNodes, pde)
M = 10  # number of simulations
## prepare room for results
RMSE_matrix = matrix(nrow = M, ncol=length(alphas))
SpRMSE_matrix = matrix(nrow = n, ncol=length(alphas))
beta1_matrix = matrix(nrow = M, ncol=length(alphas))
beta2_matrix = matrix(nrow = M, ncol=length(alphas))
alpha_index = 0
for(alpha in alphas){
alpha_index = alpha_index + 1
model$set_alpha(alpha)
RMSE_vector = rep(0, M)
SpRMSE_vector = rep(0, n)
beta_hat_1_vector = rep(0, M)
beta_hat_2_vector = rep(0, M)
for(m in 1:M){
## data
data_result = data_creation_hetero_fun(n, mean.function, std.function, beta_true = beta_true,
locations=nodes, nodes=nodes, covariates = X, seed = 37*m)
data = data_result$data
fn_true = data_result$fn_true       # true field at locations
f_true = data_result$f_true         # true field at mesh nodes
## set smoothing parameter (optimized through exact GCV strategy)
suppressWarnings({
lambda <- read.csv(paste0(getwd(), "/alpha_", as.character(alpha*100),
"/sim_", as.character(m), "/LambdaCpp.csv"), header = FALSE)$V1
})
model$set_lambda_s(lambda)
## setters
model$set_observations(as.matrix(data))
model$set_covariates(X)
## solve smoothing problem
model$solve()
## extract the results
f_hat = model$f()
fn_hat = model$fn()
beta_hat = model$beta()
## RMSE & SpRMSE
RMSE_vector[m] = RMSE(f_true, f_hat)
SpRMSE_vector = SpRMSE_vector + (fn_hat - fn_true)^2
beta_hat_1_vector[m] = beta_hat[1]
beta_hat_2_vector[m] = beta_hat[2]
}
SpRMSE_vector = sqrt(SpRMSE_vector/M)
SpRMSE_matrix[, alpha_index] = SpRMSE_vector
RMSE_matrix[, alpha_index] = RMSE_vector
beta1_matrix[, alpha_index] = beta_hat_1_vector
beta2_matrix[, alpha_index] = beta_hat_2_vector
}
###------------------------TEST 8: Mass lumping comparison----------------------
# domain:       unit square [0,1] x [0,1]
# sampling:     locations != nodes
# penalization: laplacian
# covariates:   no
# BC:           no
# order FE:     1
## RMK: set the directory to the source file location
##      ("Session" --> "Set Working Directory" --> "To source file location")
rm(list = ls())
graphics.off()
seed = 7893475
alpha = 0.5
source("../src_R/qpde.R")   # load the source files to launch the R version of the code
source("../utilities.R")
library(Matrix)
library(plot3D)
library(geoR)
library(fdaPDE)
library(fdaPDE2)
## utility for data generation
data_generation = function(x, y, z = 1){
coe <- function(x,y) 1/2*sin(5*pi*x)*exp(-x^2)+1
sin(2*pi*(coe(y,1)*x*cos(z-2)-y*sin(z-2)))*cos(2*pi*(coe(y,1)*x*cos(z-2+pi/2) +
coe(x,1)*y*sin((z-2)*pi/2)))
}
## create locations
n = 784
locations = as.matrix(expand.grid(seq(0,1,length.out=sqrt(n)), seq(0,1,length.out=sqrt(n))))
M = 10  # number of simulations
## sequence of mesh nodes
seq_N =  c(256,484,1024,2025,3969)
mat_RMSE_R_lumpFALSE = matrix(ncol = M, nrow = length(seq_N))
mat_RMSE_Cpp_lumpFALSE = matrix(ncol = M, nrow = length(seq_N))
mat_RMSE_R_lumpTRUE = matrix(ncol = M, nrow = length(seq_N))
mat_RMSE_Cpp_lumpTRUE = matrix(ncol = M, nrow = length(seq_N))
mat_time_R_lumpFALSE = matrix(ncol = M, nrow = length(seq_N))
mat_time_Cpp_lumpFALSE = matrix(ncol = M, nrow = length(seq_N))
mat_time_R_lumpTRUE = matrix(ncol = M, nrow = length(seq_N))
mat_time_Cpp_lumpTRUE = matrix(ncol = M, nrow = length(seq_N))
## sequence of optimal lambdas (found with GCV exact strategy)
lambdas_lumpFALSE = 10^seq(-6.92, -6.8, by = 0.01)
lambdas_lumpTRUE = 10^seq(-6.68, -6.58, by = 0.01)
for(index.N in 1:length(seq_N)){
## create mesh, unit square
nnodes = seq_N[index.N]
nodes = expand.grid(seq(0,1,length.out=sqrt(nnodes)), seq(0,1,length.out=sqrt(nnodes)))
mesh <- fdaPDE::create.mesh.2D(nodes = nodes, order = 1)
mesh_data <- list(
"nodes"    = mesh$nodes,
"edges"    = mesh$edges,
"elements" = mesh$triangles,
"neigh"    = mesh$neighbors,
"boundary" = mesh$nodesmarkers
)
## define regularizing term
pde <- new(Laplacian_2D_Order1, mesh_data)
## set zero forcing term
quadrature_nodes <- pde$get_quadrature_nodes()
f <- as.matrix(rep(0., times = dim(quadrature_nodes)[1]))
pde$set_forcing_term(as.matrix(f))
RMSE_R_lumpFALSE = c()
RMSE_Cpp_lumpFALSE = c()
RMSE_R_lumpTRUE = c()
RMSE_Cpp_lumpTRUE = c()
time_R_lumpFALSE = c()
time_Cpp_lumpFALSE = c()
time_R_lumpTRUE = c()
time_Cpp_lumpTRUE = c()
for(m in 1:M){
## data
data_result = data_creation_skewed(data_generation = data_generation, nodes = nodes,
locations = locations, alpha = alpha, seed = seed*m)
data = data_result$data
fn_true = data_result$fn_true       # true field at locations
f_true = data_result$f_true         # true field at mesh nodes
path_solutions_lumpFALSE = paste0(getwd(), "/data/Test_8", "/alpha_", as.character(alpha*100),
"/lumpFALSE/sim_", as.character(m))
path_solutions_lumpTRUE = paste0(getwd(), "/data/Test_8",  "/alpha_", as.character(alpha*100),
"/lumpTRUE/sim_", as.character(m))
### C++ lumping = FALSE
pde$setMassLumpingSystem(FALSE)
## define SQRPDE model
model_lumpFALSE <- new(SQRPDE_Laplacian_2D_GeoStatLocations, pde)
model_lumpFALSE$set_alpha(alpha)
model_lumpFALSE$set_observations(as.matrix(data))
model_lumpFALSE$set_locations(locations)
# Optimum lambda chosen as mean of the optimum sequence
lambda_opt_Cpp_lumpFALSE = mean(lambdas_lumpFALSE)
model_lumpFALSE$set_lambda_s(lambda_opt_Cpp_lumpFALSE)
## solve smoothing problem
t0 = Sys.time()
model_lumpFALSE$solve()
t1 = Sys.time()
## RMSE & time
RMSE_Cpp_lumpFALSE = c(RMSE_Cpp_lumpFALSE, RMSE(f_true, model_lumpFALSE$f()))
time_Cpp_lumpFALSE = c(time_Cpp_lumpFALSE, difftime(t1, t0, units = "secs"))
### R lumping = FALSE
lambda_opt_R_lumpFALSE = lambda_opt_Cpp_lumpFALSE
t2 = Sys.time()
## build the model
mesh <- fdaPDE::create.mesh.2D(nodes = nodes, order = 1)
# PDE parameters: diffusion tensor, transport vector, reaction term
K <- diag(2)
b <- rep(0, 2)
c <- 0
# FEM, mass, and stiffness matrices
coeff <- diag(dim(nodes)[1])
basis <- fdaPDE::create.FEM.basis(mesh)         # FEM basis expansion
fun <- fdaPDE::FEM(coeff, basis)
psi <- as(fdaPDE::eval.FEM(fun, locations), "sparseMatrix")
R0 <- get.FEM.Mass.Matrix(mesh)  # no lumping
R1 <- get.FEM.PDE.Matrix(mesh, K, b, c) # stiffness matrix for a general elliptic PDE
t3 = Sys.time()
time_build_model_lumpFALSE = difftime(t3, t2, units = "secs")
## fit
fit_R_lumpFALSE <- qgam.fem_our(y = data, Z = psi, R0 = R0, R1 = R1, alpha = alpha,
lambdas = lambda_opt_R_lumpFALSE, eps = 0.0, tune = 1.0,
maxiter = 200, tol = 1e-6,
exact = TRUE, tol.weights = 1e-6,
mass_lumping = FALSE,
measure.time = TRUE)
## RMSE & time
RMSE_R_lumpFALSE = c(RMSE_R_lumpFALSE, RMSE(f_true, fit_R_lumpFALSE$f))
time_R_lumpFALSE= c(time_R_lumpFALSE, fit_R_lumpFALSE$time_fit + time_build_model_lumpFALSE)  # in seconds
#---
### C++ lumping = TRUE
pde$setMassLumpingSystem(TRUE)
## define SQRPDE model
model_lumpTRUE <- new(SQRPDE_Laplacian_2D_GeoStatLocations, pde)
model_lumpTRUE$set_alpha(alpha)
model_lumpTRUE$set_observations(as.matrix(data))
model_lumpTRUE$set_locations(locations)
# Optimum lambda chosen as mean of the optimum sequence
lambda_opt_Cpp_lumpTRUE = mean(lambdas_lumpTRUE)
model_lumpTRUE$set_lambda_s(lambda_opt_Cpp_lumpTRUE)
## solve smoothing problem
t0 = Sys.time()
model_lumpTRUE$solve()
t1 = Sys.time()
## RMSE & time
RMSE_Cpp_lumpTRUE = c(RMSE_Cpp_lumpTRUE, RMSE(f_true, model_lumpTRUE$f()))
time_Cpp_lumpTRUE = c(time_Cpp_lumpTRUE, difftime(t1, t0, units = "secs"))
### R
lambda_opt_R_lumpTRUE = lambda_opt_Cpp_lumpTRUE
t2 = Sys.time()
## build the model
mesh <- fdaPDE::create.mesh.2D(nodes = nodes, order = 1)
# PDE parameters: diffusion tensor, transport vector, reaction term
K <- diag(2)
b <- rep(0, 2)
c <- 0
# FEM, mass, and stiffness matrices
coeff <- diag(dim(nodes)[1])
basis <- fdaPDE::create.FEM.basis(mesh)         # FEM basis expansion
fun <- fdaPDE::FEM(coeff, basis)
psi <- as(fdaPDE::eval.FEM(fun, locations), "sparseMatrix")
R0 <- diag(colSums(get.FEM.Mass.Matrix(mesh)))  # lumping
R1 <- get.FEM.PDE.Matrix(mesh, K, b, c) # stiffness matrix for a general elliptic PDE
t3 = Sys.time()
time_build_model_lumpTRUE = difftime(t3, t2, units = "secs")
## fit
fit_R_lumpTRUE <- qgam.fem_our(y = data,Z = psi, R0 = R0, R1 = R1, alpha = alpha,
lambdas = lambda_opt_R_lumpTRUE, eps = 0.0, tune = 1.0,
maxiter = 200, tol = 1e-6,
exact = TRUE, tol.weights = 1e-6,
mass_lumping = TRUE,
measure.time = TRUE)
## RMSE & time
RMSE_R_lumpTRUE = c(RMSE_R_lumpTRUE, RMSE(f_true, fit_R_lumpTRUE$f))
time_R_lumpTRUE= c(time_R_lumpTRUE, fit_R_lumpTRUE$time_fit + time_build_model_lumpTRUE)  # in seconds
}
mat_RMSE_R_lumpFALSE[index.N, ] = RMSE_R_lumpFALSE
mat_RMSE_Cpp_lumpFALSE[index.N, ] = RMSE_Cpp_lumpFALSE
mat_RMSE_R_lumpTRUE[index.N, ] = RMSE_R_lumpTRUE
mat_RMSE_Cpp_lumpTRUE[index.N, ] = RMSE_Cpp_lumpTRUE
mat_time_R_lumpFALSE[index.N, ] = time_R_lumpFALSE
mat_time_Cpp_lumpFALSE[index.N, ] = time_Cpp_lumpFALSE
mat_time_R_lumpTRUE[index.N, ] = time_R_lumpTRUE
mat_time_Cpp_lumpTRUE[index.N, ] = time_Cpp_lumpTRUE
}
setwd("C:/Users/marco/OneDrive - Politecnico di Milano/Corsi/Magistrale/Anno_II_Semestre_II/PACS_project_shared/R/Our/to_deliver/tests_wrappers/Test_9")
###------------------------TEST 9: R-C++ comparison-----------------------------------------------
# domain:       c-shaped
# sampling:     locations != nodes
# penalization: laplacian
# covariates:   yes
# BC:           no
# order FE:     1
# The two methods are compared with their default mass lumping options, namely
# lumping = FALSE for C++ and lumping = TRUE for R
## RMK: set the directory to the source file location
##      ("Session" --> "Set Working Directory" --> "To source file location")
rm(list = ls())
graphics.off()
options(digits=16)
alpha = 0.5
alpha_string = as.character(alpha*100)
seed = 476813
source("../src_R/qpde.R")
source("../utilities.R")
library(Matrix)
library(plot3D)
library(mvnormtest)
library(geoR)
library(fdaPDE2)
## create mesh, unit square
data(horseshoe2D)
options("scipen" = 999)
mesh_temp <- create.mesh.2D(
nodes    = horseshoe2D$boundary_nodes,
segments = horseshoe2D$boundary_segments
)
seq_max_area_mesh = c(0.008, 0.004, 0.002, 0.001)
seq_N = c()
for(area in seq_max_area_mesh) {
nodes <- refine.mesh.2D(mesh_temp, maximum_area = area)$nodes
N <- nrow(nodes)
seq_N = c(seq_N, N)
}
## generate locations
area_loc =  0.002
locations <- refine.mesh.2D(mesh_temp, maximum_area = area_loc )$nodes
n <- nrow(locations)
## utility for data generation
mean.function = function(locations){
f = fs.test(locations[,1], locations[,2], b=1, exclude = FALSE)
return(f)
}
std.function = function(locations){
f = fs.test(locations[,1], locations[,2], b=0.5, exclude = FALSE)
min = min(f)
f = 0.2*(f - 1.2*min(f))
return(f)
}
## beta true
beta_true = c(2, -1)
M = 10  # number of simulations
# prepare room for results
RMSE_Cpp = matrix(nrow = M, ncol = length(seq_N))
RMSE_R = matrix(nrow = M, ncol = length(seq_N))
beta_hat_1_Cpp = matrix(nrow = M, ncol = length(seq_N))
beta_hat_1_R = matrix(nrow = M, ncol = length(seq_N))
beta_hat_2_Cpp = matrix(nrow = M, ncol = length(seq_N))
beta_hat_2_R = matrix(nrow = M, ncol = length(seq_N))
time_Cpp = matrix(nrow = M, ncol = length(seq_N))
time_R = matrix(nrow = M, ncol = length(seq_N))
for(j in 1:length(seq_N)){
N = seq_N[j]
mesh <- refine.mesh.2D(mesh_temp, maximum_area = seq_max_area_mesh[j])
N_string = as.character(N)
nodes = mesh$nodes
mesh_data <- list(
"nodes"    = mesh$nodes,
"edges"    = mesh$edges,
"elements" = mesh$triangles,
"neigh"    = mesh$neighbors,
"boundary" = mesh$nodesmarkers
)
## define regularizing term
pde <- new(Laplacian_2D_Order1, mesh_data)
## set zero forcing term
quadrature_nodes <- pde$get_quadrature_nodes()
f <- as.matrix(rep(0., times = dim(quadrature_nodes)[1]))
pde$set_forcing_term(as.matrix(f))
## define SQRPDE model
model <- new(SQRPDE_Laplacian_2D_GeoStatLocations, pde)
model$set_alpha(alpha)
# Locations
model$set_locations(locations)
for(m in 1:M){
# Covariates
set.seed(21*m)
cov1 <- (rnorm(n, mean = 0 , sd = 1))
cov2 <- (rexp(n, rate = 1))
X = cbind(cov1 ,cov2)
# Data
data = rnorm(n, mean = mean.function(locations),
sd = std.function(locations)) + X%*%beta_true
# True solution
fn_true = mean.function(locations) + qnorm(alpha) * std.function(locations)
f_true = mean.function(nodes) + qnorm(alpha) * std.function(nodes)
### C++
## set smoothing parameter (optimized through exact GCV strategy)
lambda_Cpp <- read.csv(paste0("N_", as.character(N), "/sim_", as.character(m),
"/LambdaCpp_massFALSE.csv"), header = FALSE)$V1
model$set_lambda_s(lambda_Cpp)
## set observations and covariates
model$set_observations(as.matrix(data))
model$set_covariates(X)
## solve smoothing problem
t0 = Sys.time()
model$solve()
t1 = Sys.time()
## extract the results
f_hat_Cpp = model$f()
fn_hat_Cpp = model$fn()
beta_hat_Cpp = model$beta()
## RMSE & SpRMSE
RMSE_Cpp[m, j] = RMSE(f_true, f_hat_Cpp)
beta_hat_1_Cpp[m, j] = beta_hat_Cpp[1]
beta_hat_2_Cpp[m, j] = beta_hat_Cpp[2]
## time
time_Cpp[m, j] = difftime(t1, t0, units = "secs")
### R
lambda_R <- read.csv(paste0(getwd(),"/N_", as.character(N), "/sim_", as.character(m),
"/LambdaR_50.csv"))$x
t2 = Sys.time()
## build the model
# PDE parameters: diffusion tensor, transport vector, reaction term
K <- diag(2)
b <- rep(0, 2)
c <- 0
# FEM, mass, and stiffness matrices
coeff <- diag(dim(nodes)[1])
basis <- fdaPDE::create.FEM.basis(mesh)         # FEM basis expansion
fun <- fdaPDE::FEM(coeff, basis)
psi <- as(fdaPDE::eval.FEM(fun, locations), "sparseMatrix")
R0 <- diag(colSums(get.FEM.Mass.Matrix(mesh)))  # lumping
R1 <- get.FEM.PDE.Matrix(mesh, K, b, c)         # stiffness matrix for a general elliptic PDE
t3 = Sys.time()
time_build_model = difftime(t3, t2, units = "secs")
## fit
fit_R <- qgam.xfem_our(y = data, X = X, Z = psi, R0 = R0, R1 = R1, alpha = alpha,
lambdas = lambda_R, eps = 0.0, tune = 1.0,
maxiter = 200, tol = 1e-6,
exact = TRUE, tol.weights = 1e-6,
mass_lumping_sys = TRUE, mass_lumping_GCV = TRUE,
measure.time = TRUE)
## extract the results
f_hat_R = fit_R$f
fn_hat_R = fit_R$fn
beta_hat_R = fit_R$beta
## RMSE & SpRMSE
RMSE_R[m, j] = RMSE(f_true, f_hat_R)
beta_hat_1_R[m, j] = beta_hat_R[1]
beta_hat_2_R[m, j] = beta_hat_R[2]
## time
time_R[m, j] = fit_R$time_fit + time_build_model  # in seconds
}
}
